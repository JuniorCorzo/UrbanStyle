---
import HeaderMenu from '@/components/header/HeaderMenu.astro'
import HeaderActions from '@/components/header/HeaderActions.astro'
import { Bars3Icon } from '@heroicons/react/24/outline'
const { user } = Astro.locals
---

<header
	class="backdrop-blur-xs bg-accent/70 shadow-crust sticky top-0 z-40 grid min-h-14 grid-cols-1 items-center justify-between gap-y-3 px-5 shadow md:px-14 lg:grid-cols-3"
	transition:persist
>
	<div class="flex min-h-14 items-center justify-between">
		<h1 id="home" class="cursor-pointer text-nowrap text-xl font-bold">Urban Style</h1>
		<span
			id="menu_toggle"
			class="cursor-pointer lg:hidden"
			aria-label="Toggle Menu"
			aria-expanded="false"
			role="button"
		>
			<Bars3Icon className="pointer-events-none size-10" />
		</span>
	</div>
	<div id="header_menu" class="relative flex justify-center px-2 max-lg:hidden">
		<HeaderMenu />
	</div>
	<nav id="header_actions" class="relative flex h-full justify-end max-lg:hidden">
		<HeaderActions />
	</nav>
</header>

<script>
	import { $ } from '@/lib/dom-selector'
	import { navigate } from 'astro:transitions/client'

	const handleExpanded = () => {
		const $menuToggle = $<HTMLDivElement>('#menu_toggle')
		const $headerMenu = $<HTMLDivElement>('#header_menu')
		const $headerActions = $<HTMLDivElement>('#header_actions')
		const $headerElement = $<HTMLHeadElement>('header')
		if (!$menuToggle || !$headerMenu || !$headerActions || !$headerElement) return

		const isExpanded: string =
			$menuToggle.getAttribute('aria-expanded') === 'true' ? 'false' : 'true'

		$menuToggle.setAttribute('aria-expanded', isExpanded)
		$headerMenu.classList.toggle('max-lg:hidden')
		$headerActions.classList.toggle('max-lg:hidden')
		$headerElement.classList.toggle('pb-3')
	}

	const initializeListener = () => {
		$('#home')?.addEventListener('click', () => {
			navigate('/home', {
				history: 'push',
			})
		})
		$('#menu_toggle')?.addEventListener('click', (event) => {
			event.stopPropagation()
			handleExpanded()
		})
	}
	document.addEventListener('astro:page-load', initializeListener)
</script>
