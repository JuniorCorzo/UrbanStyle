---
import Subtitle from "@/components/text/Subtitle.astro";
import RegularText from "@/components/text/RegularText.astro";
import Tags from "@/components/home/Tags.astro";
import SelectInput from "@/components/react/inputs/SelectInput";
import Counter from "@/components/home/Counter.astro";
import Button, { sizeClasses } from "@/components/Button.astro";
import { ProductVariantSelectors } from "@/components/react/ProductVariantSelectors";
import type { Products } from "@/interface/product.interface";

interface Props {
  userId: string;
  product: Products;
}

const { userId, product } = Astro.props;
const { name, description, categories, attributes, price, stock } = product;
const { searchParams } = Astro.url;
const colorParam = searchParams.get("color") ?? undefined;
const sizeParam = searchParams.get("size") ?? undefined;
---

<div
  class="w-fit min-w-[450px] h-full flex flex-col gap-2 px-8 py-5 rounded justify-center"
>
  <Subtitle Text={name} />
  <RegularText>{description}</RegularText>
  <Tags categories={categories} />
  <Subtitle
    size="3xl"
    class="py-3"
    Text={`$ ${price.toLocaleString()}`}
    title="Precio"
  />
  <div class="w-full min-h-[42px] flex flex-col sm:flex-row gap-4">
    <ProductVariantSelectors
      attributes={attributes}
      defaultColor={colorParam}
      defaultSize={sizeParam}
      client:idle
    />
  </div>
  <div class="flex flex-col gap-5 pt-5">
    <Counter id="product_quantity" maxNumber={stock} />
    <Button
      id="add_cart"
      class="bg-accent/70 w-full h-fit max-w-lg"
      size="md"
      data-user-id={userId}
    >
      AÃ±adir al Carrito
    </Button>
  </div>
</div>

<script>
  import type { Cart } from "@/interface/cart.interface";
  import { $ } from "@/lib/dom-selector";
  import { showError } from "@/lib/showErrorMessages";
  import { dispatchCartCountEvent } from "@/lib/utils/cart-count-event";
  import { CartCreateScheme } from "@/lib/validations/cart.validation";
  import { CartService } from "@/service/cart.service";
  import { ProductStore } from "@/state/product.store";
  import { z } from "zod";

  const productId = new URLSearchParams(location.search).get("id");

  const sendCart = (createCart: Cart) => {
    CartService()
      .addProductToCart(createCart)
      .then((cart) => {
        dispatchCartCountEvent(cart.items.length);
      });
  };

  /**
   * Extracts userId and productQuantity from the event.
   * @param event - MouseEvent from the click action
   * @returns An object containing userId and productQuantity, or null if missing
   */
  function extractEventData(
    event: MouseEvent
  ): { userId: string; productQuantity: number } | null {
    const target = event.target as HTMLButtonElement;
    const userId = target.dataset.userId;
    const quantityInput = $("#product_quantity") as HTMLInputElement | null;
    if (!userId || !quantityInput) return null;

    return { userId, productQuantity: quantityInput.valueAsNumber };
  }

  /**
   * Retrieves product details from the store based on productId.
   * @param productId - ID of the product to find
   * @returns Product details (name, price, discount) or null if not found
   */
  async function fetchProductDetails(
    productId: string
  ): Promise<{ name: string; price: number; discount: number } | null> {
    const { productStore } = await ProductStore();
    const product = productStore.get().find((item) => item.id === productId);

    if (!product || product.discount === undefined) return null;
    const { name, price, discount } = product;

    return { name, price, discount };
  }

  function getInputElement(): {
    colorInput: HTMLInputElement | null;
    sizeInput: HTMLInputElement | null;
  } {
    const colorInput = $<HTMLInputElement>("input[name='color']");
    const sizeInput = $<HTMLInputElement>("input[name='size']");

    return { colorInput, sizeInput };
  }

  /**
   * Parses color and size inputs from the DOM.
   * @returns An object containing color and size strings, or null if parsing fails
   */
  function parseColorSize(): { color: string; size: string } | undefined {
    const { colorInput, sizeInput } = getInputElement();

    const colorValue = colorInput?.value;
    const sizeValue = sizeInput?.value;

    if (!colorValue || !sizeValue) return;
    const [, color] = colorValue.split(",");
    const [, size] = sizeValue.split(",");
    if (!color || !size) return;

    return { color, size };
  }

  /**
   * Constructs the Cart object based on provided parameters.
   * @param userId - ID of the user
   * @param productId - ID of the product
   * @param name - Product name
   * @param price - Product price
   * @param discount - Product discount
   * @param color - Chosen color
   * @param size - Chosen size
   * @param quantity - Quantity to add
   * @returns A Cart object ready to be sent
   */
  function buildCart(
    userId: string,
    productId: string,
    name: string,
    price: number,
    discount: number,
    color: string,
    size: string,
    quantity: number
  ): Cart {
    return {
      userId,
      items: [{ productId, name, color, size, discount, price, quantity }],
    };
  }

  /**
   * Main click handler to add a product to the cart.
   * @param productId - ID of the product to add
   * @param event - MouseEvent from the click action
   */
  async function handleClick(event: MouseEvent): Promise<void> {
    if (!productId) return;

    const eventData = extractEventData(event);
    if (!eventData) return;
    const { userId, productQuantity } = eventData;

    const productDetails = await fetchProductDetails(productId);
    if (!productDetails) return;
    const { name, price, discount } = productDetails;

    const variant = parseColorSize();
    const { color, size } = variant ?? {};

    try {
      CartCreateScheme.parse({ color, size });
    } catch (err) {
      if (err instanceof z.ZodError) {
        showError(err);
        return;
      }
      console.error("Validation error:", err);
      return;
    }

    // Build and send cart
    if (!color || !size) return;
    const cart = buildCart(
      userId,
      productId,
      name,
      price,
      discount,
      color,
      size,
      productQuantity
    );
    sendCart(cart);
  }

  //Reset the selectors for evict errors in validation
  const resetSelects = () => {
    const { colorInput, sizeInput } = getInputElement();
    if (!colorInput || !sizeInput) return;
    colorInput.value = "";
    sizeInput.value = "";
  };

  document.addEventListener("astro:page-load", () => {
    $("#add_cart")?.addEventListener("click", handleClick);
    resetSelects();
  });
</script>
