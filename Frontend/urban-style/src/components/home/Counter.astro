---
import { PlusIcon, MinusIcon } from '@heroicons/react/24/outline'
import Button from '../Button.astro'

interface Props {
	maxNumber: number
	id?: string
	value?: string
}

const { maxNumber, id, value = '1', ...props } = Astro.props
---

<div class="flex w-full">
	<div class="border-border flex w-full rounded border" {...props}>
		<Button
			id="decrement"
			class="flex aspect-square size-10 items-center justify-center rounded-br-[0] rounded-tr-[0] border-0"
			size="sm"
		>
			<MinusIcon className="pointer-events-none size-5" />
		</Button>
		<input
			id={id}
			type="number"
			class="border-border focus:custom-ring w-full min-w-14 border-l border-r text-center focus:outline-none"
			value={value}
			min="1"
			max={maxNumber}
			data-value={value}
		/>
		<Button
			id="increment"
			class="flex aspect-square size-10 items-center justify-center rounded-bl-[0] rounded-tl-[0] border-0"
			size="sm"
		>
			<PlusIcon className="pointer-events-none size-5" />
		</Button>
	</div>
</div>

<script>
	import { $$ } from '@/lib/dom-selector'

	const handleIncrement = ($inputNumber: HTMLInputElement) => {
		if ($inputNumber.valueAsNumber >= Number($inputNumber.max)) {
			$inputNumber.value = $inputNumber.max
			return
		}
		$inputNumber.valueAsNumber++
	}

	const handleDecrement = ($inputNumber: HTMLInputElement) => {
		if ($inputNumber.min >= $inputNumber.value) {
			$inputNumber.value = $inputNumber.min
			return
		}
		$inputNumber.valueAsNumber--
	}

	const handleValidate = ($inputNumber: HTMLInputElement) => {
		let value = $inputNumber.valueAsNumber
		if (isNaN(value) || value < Number($inputNumber.min)) {
			$inputNumber.value = $inputNumber.min
			return
		}
		if (value > Number($inputNumber.max)) {
			$inputNumber.value = $inputNumber.max
		}
	}

	// FunciÃ³n para inicializar los listeners SIEMPRE sobre los inputs actuales
	const initCounterListeners = () => {
		const $inputsNumber = $$('input[type="number"]')
		$inputsNumber.forEach(($input) => {
			const $inputNumber = $input as HTMLInputElement
			$inputNumber.value = $inputNumber.dataset.value as string

			// Limpia listeners previos
			$inputNumber.onkeydown = null
			$inputNumber.onblur = null

			$inputNumber.addEventListener('keydown', (event) => {
				if (event.key === 'Enter') {
					handleValidate($inputNumber)
				}
			})

			$inputNumber.addEventListener('blur', () => handleValidate($inputNumber))

			const $parent = $inputNumber.parentElement as HTMLDivElement
			const $decrement = $parent?.querySelector('#decrement')
			const $increment = $parent?.querySelector('#increment')

			// Limpia listeners previos
			$decrement?.replaceWith($decrement.cloneNode(true))
			$increment?.replaceWith($increment.cloneNode(true))

			$parent
				?.querySelector('#decrement')
				?.addEventListener('click', () => handleDecrement($inputNumber))
			$parent
				?.querySelector('#increment')
				?.addEventListener('click', () => handleIncrement($inputNumber))
		})
	}

	document.addEventListener('astro:page-load', initCounterListeners)
	document.addEventListener('astro:after-swap', initCounterListeners)
</script>

<style>
	input[type='number']::-webkit-inner-spin-button,
	input[type='number']::-webkit-outer-spin-button {
		-webkit-appearance: none;
		margin: 0;
	}

	input[type='number'] {
		-moz-appearance: textfield;
	}
</style>
