---
import { flexRender } from "@/lib/table-config";
import { DashboardMediator } from "@/lib/dashboard-mediator";
import { TABLE_MEDIATOR_METADATA } from "@/const/table-mediator.const";
import type { ColumnDef } from "@tanstack/table-core";
import TableActions from "./TableActions.astro";
import type { BaseDocument } from "@/interface/base.interface";

const { mediatorSearchParam } = TABLE_MEDIATOR_METADATA;
const mediator = Astro.url.searchParams.get(mediatorSearchParam);
if (!mediator) {
  Astro.redirect("/404");
  return;
}

const tableMediator = await DashboardMediator(mediator);
if (!tableMediator) {
  Astro.redirect("/404");
  return;
}

const { tableConfig } = tableMediator.table.tableConfig();
const actionsColumns: ColumnDef<unknown> = {
  id: "actions",
  header: "Acciones",
};

tableConfig.setOptions((prev) => ({
  ...prev,
  columns: [...prev.columns, actionsColumns],
}));
---

<table class="table w-full border border-border">
  <thead class="h-11 bg-accent text-center">
    {
      tableConfig.getHeaderGroups().map((headerGroup) => (
        <tr>
          {headerGroup.headers.map((header) => (
            <th>{header.column.columnDef?.header}</th>
          ))}
        </tr>
      ))
    }
  </thead>
  <tbody class="">
    {
      tableConfig.getRowModel().rows.map((row) => (
        <tr>
          {row.getVisibleCells().map((cell) => (
            <td class="max-w-72 min-h-11 px-4 py-2 border border-border text-center">
              {flexRender(
                cell.column.id === "actions" ? (
                  <TableActions id={(row.original as BaseDocument).id} />
                ) : (
                  cell.column.columnDef?.cell
                ),
                cell.getContext()
              )}
            </td>
          ))}
        </tr>
      ))
    }
  </tbody>
</table>

<script>
  import { $$ } from "@/lib/dom-selector";
  import { openModalEvent } from "@/lib/utils/open-modal-event";
  import { selectMediator } from "@/lib/utils/select-mediator";

  const handleUpdate = async (id: string) => {
    const dashboardMediator = await selectMediator();
    if (dashboardMediator) {
      const { formConfig, sendData } = dashboardMediator.form;
      openModalEvent(await formConfig(id), sendData, id);
    }
  };

  $$("#edit").forEach((edit) => {
    edit.querySelector("button")?.addEventListener("click", (e) => {
      const { id } = (e.currentTarget as HTMLButtonElement).dataset;
      if (!id) return;

      handleUpdate(id);
    });
  });
</script>
