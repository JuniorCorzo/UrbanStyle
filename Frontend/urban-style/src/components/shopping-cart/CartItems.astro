---
import type { ProductSummary } from '@/interface/product.interface'
import Subtitle from '../text/Subtitle.astro'
import { ProductStore } from '@/state/product.store'
import Counter from '../home/Counter.astro'
import ProductDetailsCard from './ProductDetailsCard.astro'

interface Props {
	userId: string
	items: ProductSummary[]
}

const { items, userId } = Astro.props
const { getProductById } = await ProductStore()
---

<article class="flex w-full grow-[999] flex-col gap-4">
	{
		items.map(({ productId, name, price, quantity, color, size }) => (
			<div class="bg-foreground border-border shadow-accent relative flex gap-5 rounded-md border shadow-md">
				<div class="xs:flex-row flex w-full flex-col justify-between gap-x-5 gap-y-2">
					<ProductDetailsCard
						productId={productId}
						userId={userId}
						name={name}
						color={color}
						size={size}
						getProductById={getProductById}
					/>
					<div class="flex flex-col items-end gap-1 px-3 py-2">
						<Counter
							id="quantity_input"
							maxNumber={getProductById(productId).get()?.stock || 0}
							value={quantity.toString()}
							data-user-id={userId}
							data-product-id={productId}
							data-color={color}
							data-size={size}
						/>
						<Subtitle
							id="product_total"
							size="base"
							Text={`${Intl.NumberFormat('es-CO', {
								style: 'currency',
								currency: 'COP',
								currencyDisplay: 'code',
							}).format(price * quantity)}`}
						/>
						<Subtitle
							id="price_unit"
							class="font-normal"
							size="xs"
							Text={`(${Intl.NumberFormat('es-CO', {
								style: 'currency',
								currency: 'COP',
							}).format(price)}c/u)`}
						/>
					</div>
				</div>
			</div>
		))
	}
</article>
