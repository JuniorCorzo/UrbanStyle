---
import Button from '@/components/Button.astro'
import InputField from '@/components/header/InputField.astro'
import MessageError from '@/components/header/MessageError.astro'
import Subtitle from '@/components/text/Subtitle.astro'
import { CheckIcon, ChevronLeftIcon } from '@heroicons/react/24/outline'
---

<section class="relative flex min-h-dvh items-start justify-center py-5 sm:items-center sm:py-0">
	<article
		class="w-md bg-accent/50 border-border mx-4 my-2 overflow-auto rounded-xl border-2 pb-5 pt-10 shadow-xl backdrop-blur-sm landscape:max-h-96 sm:landscape:max-h-[44rem]"
	>
		<div class="h-12 text-center">
			<h1 class="text-3xl font-bold">Crear cuenta</h1>
			<Subtitle class="font-normal" size="lg" Text="¡Únete y empieza tu aventura!" />
		</div>
		<div class="mt-1 flex flex-col items-center justify-center">
			<form id="sign-up_form" class="flex w-full max-w-md flex-col gap-4 rounded px-8 pb-8 pt-6">
				<div>
					<InputField
						label="Nombre de usuario"
						placeholder="Nombre de usuario"
						errorId="username_error"
						name="username"
					/>
				</div>
				<div>
					<InputField
						label="Correo electrónico"
						placeholder="Correo electrónico"
						name="email"
						errorId="email_error"
					/>
				</div>
				<div>
					<InputField
						label="Numero telefónico"
						placeholder="3124038345"
						name="phone"
						errorId="phone_error"
					/>
				</div>
				<div class="">
					<InputField
						label="Contraseña"
						placeholder="Contraseña"
						name="password"
						errorId="password_error"
						type="password"
					/>
				</div>
				<div>
					<InputField
						label="Confirmar contraseña"
						type="password"
						placeholder="Confirmar contraseña"
						name="confirm_password"
						errorId="confirm_password_error"
					/>
				</div>
				<div>
					<label class="flex cursor-pointer flex-col gap-2">
						<MessageError errorId="accepted_error" />
						<div class="inline-flex items-center gap-2 text-sm font-normal leading-none">
							<div class="relative aspect-square size-5">
								<input
									name="accepted"
									class="bg-background border-border checked:bg-accent-2 focus:custom-ring peer size-5 appearance-none rounded border transition-colors duration-150 focus:outline-none"
									type="checkbox"
								/>
								<CheckIcon
									className="-translate-1/2 text-crust stroke-3 invisible absolute left-1/2 top-1/2 size-4 rounded-full stroke-current transition-all duration-75 peer-checked:visible"
								/>
							</div>
							<span>
								Acepto la
								<a class="font-medium underline" href="/terms" target="_blank">
									política de tratamiento de datos personales.
								</a>
							</span>
						</div>
					</label>
				</div>
				<div
					class="flex w-full flex-col-reverse items-center justify-center gap-2 sm:flex-row sm:gap-4"
				>
					<Button id="go_to_home" class="w-full" size="md">
						<span>Volver al inicio</span>
					</Button>
					<Button class="w-full" size="md" type="submit">¡Listo, regístrate!</Button>
				</div>
			</form>
		</div>
	</article>
</section>

<script>
	import { userSchemeToUser } from '@/adapter/user.adapter'
	import { $ } from '@/lib/dom-selector'
	import { showError } from '@/lib/showErrorMessages'
	import ToasterManager from '@/lib/utils/ToasterManager'
	import { createUserSchema, type CreateUserValid } from '@/lib/validations/user.validations'
	import { UserService } from '@/service/user.service'
	import { navigate } from 'astro:transitions/client'
	import z from 'zod'

	const sendRequest = async (user: CreateUserValid) => {
		const response = await UserService.signUp(userSchemeToUser(user))
		if (!response.success) {
			ToasterManager.emitError(response.error.toString(), {})
			return
		}

		ToasterManager.emitSuccess('Usuario creado con éxito')
		navigate('/home')
	}

	const initializeListener = () => {
		const $form = $<HTMLFormElement>('#sign-up_form')

		$form?.addEventListener('submit', (event) => {
			event.preventDefault()
			const formData = new FormData($form)
			const data = Object.fromEntries(formData) as unknown as CreateUserValid

			console.log(data)
			try {
				const userCreate = createUserSchema.parse(data)
				sendRequest(userCreate)
			} catch (error) {
				console.log(error)
				if (error instanceof z.ZodError) {
					showError(error)
					return
				}
			}
		})

		$('#go_to_home')?.addEventListener('click', () => {
			navigate('/home')
		})
	}

	document.addEventListener('astro:page-load', initializeListener)
</script>
