services:
  mongo:
    image: mongo:8.0.0
    ports:
      - "27017:27017"
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'mongo:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
    networks:
      - mongo_net
    deploy:
      replicas: 1
      resources:
        reservations:
          cpus: "0.5"
        limits:
          cpus: "1"
          memory: 1GiB

  redis:
    image: redis:8.0-alpine
    expose:
      - "6379:6379"
    command: ["redis-server", "redis.conf"]
    volumes:
      - redis_data:/data
      - ./redis.conf:/data/redis.conf:Z
    networks:
      - redis_net
    deploy:
      replicas: 1
      resources:
        reservations:
          cpus: "0.2"
          memory: 256M
        limits:
          cpus: "0.5"
          memory: 512M

  api:
    image: juniorcorzo:urban_style_backend
    ports:
      - "8080:8080"
    depends_on:
      - mongo
      - redis
    env_file:
      - .env
    networks:
      - api_net
      - mongo_net
      - redis_net
    deploy:
      replicas: 1
      resources:
        reservations:
          cpus: "0.5"
          memory: 256M
        limits:
          cpus: "1"
          memory: 1GiB

  frontend:
    image: juniorcorzo:urban_style_frontend
    depends_on:
      - api
    ports:
      - 4321:4321
    networks:
      - api_net
    deploy:
      resources:
        reservations:
          cpus: "0.1"
          memory: 128M
        limits:
          cpus: "0.3"
          memory: 256M

networks:
  mongo_net:
  redis_net:
  api_net:

volumes:
  mongo_data:
  mongo_config:
  redis_data:
